[{"C:\\source\\todo-yesterday\\src\\index.tsx":"1","C:\\source\\todo-yesterday\\src\\reportWebVitals.ts":"2","C:\\source\\todo-yesterday\\src\\App.tsx":"3","C:\\source\\todo-yesterday\\src\\ErrorMessage.tsx":"4","C:\\source\\todo-yesterday\\src\\NavBar.tsx":"5","C:\\source\\todo-yesterday\\src\\AuthProvider.tsx":"6","C:\\source\\todo-yesterday\\src\\Welcome.tsx":"7","C:\\source\\todo-yesterday\\src\\NewEvent.tsx":"8","C:\\source\\todo-yesterday\\src\\Config.ts":"9","C:\\source\\todo-yesterday\\src\\GraphService.ts":"10","C:\\source\\todo-yesterday\\src\\Todo.tsx":"11","C:\\source\\todo-yesterday\\src\\TodoRow.tsx":"12","C:\\source\\todo-yesterday\\src\\Calendar.tsx":"13","C:\\source\\todo-yesterday\\src\\CalendarDayRow.tsx":"14"},{"size":500,"mtime":1615244085434,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1615244085492,"results":"17","hashOfConfig":"16"},{"size":1949,"mtime":1615322023702,"results":"18","hashOfConfig":"16"},{"size":647,"mtime":1615244085284,"results":"19","hashOfConfig":"16"},{"size":3857,"mtime":1615325573703,"results":"20","hashOfConfig":"16"},{"size":5384,"mtime":1615294851623,"results":"21","hashOfConfig":"16"},{"size":904,"mtime":1615317081788,"results":"22","hashOfConfig":"16"},{"size":5063,"mtime":1615244085359,"results":"23","hashOfConfig":"16"},{"size":154,"mtime":1615325891669,"results":"24","hashOfConfig":"16"},{"size":3569,"mtime":1615316543134,"results":"25","hashOfConfig":"16"},{"size":1967,"mtime":1615248391766,"results":"26","hashOfConfig":"16"},{"size":1305,"mtime":1615248287565,"results":"27","hashOfConfig":"16"},{"size":3001,"mtime":1615325799371,"results":"28","hashOfConfig":"16"},{"size":2265,"mtime":1615325357800,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1797e45",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\source\\todo-yesterday\\src\\index.tsx",[],["65","66"],"C:\\source\\todo-yesterday\\src\\reportWebVitals.ts",[],"C:\\source\\todo-yesterday\\src\\App.tsx",["67"],"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { Container } from 'reactstrap';\nimport withAuthProvider, { AuthComponentProps } from './AuthProvider';\nimport NavBar from './NavBar';\nimport ErrorMessage from './ErrorMessage';\nimport Welcome from './Welcome';\nimport Calendar from './Calendar';\nimport NewEvent from './NewEvent';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Todo from './Todo';\n\nclass App extends Component<AuthComponentProps> {\n  render() {\n    let error = null;\n    if (this.props.error) {\n      error = <ErrorMessage\n        message={this.props.error.message}\n        debug={this.props.error.debug} />;\n    }\n\n    // <renderSnippet>\n    return (\n      <Router>\n        <div>\n          <NavBar\n            isAuthenticated={this.props.isAuthenticated}\n            authButtonMethod={this.props.isAuthenticated ? this.props.logout : this.props.login}\n            user={this.props.user} />\n          <Container>\n            {error}\n            \n            {!this.props.isAuthenticated && <Welcome authButtonMethod={this.props.login}></Welcome>}\n\n            {this.props.isAuthenticated && <Route exact path=\"/\"\n              render={(props) =>\n                <Calendar {...props} />\n              } />}\n            <Route exact path=\"/calendar\"\n              render={(props) =>\n                this.props.isAuthenticated ?\n                  <Calendar {...props} /> :\n                  <Redirect to=\"/\" />\n              } />\n            <Route exact path=\"/newevent\"\n              render={(props) =>\n                this.props.isAuthenticated ?\n                  <NewEvent {...props} /> :\n                  <Redirect to=\"/\" />\n              } />\n          </Container>\n        </div>\n      </Router>\n    );\n    // </renderSnippet>\n  }\n}\n\nexport default withAuthProvider(App);\n","C:\\source\\todo-yesterday\\src\\ErrorMessage.tsx",[],"C:\\source\\todo-yesterday\\src\\NavBar.tsx",["68"],"C:\\source\\todo-yesterday\\src\\AuthProvider.tsx",["69"],"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport React from 'react';\nimport { PublicClientApplication } from '@azure/msal-browser';\n\nimport { config } from './Config';\nimport { getUserDetails } from './GraphService';\n\nexport interface AuthComponentProps {\n  error: any;\n  isAuthenticated: boolean;\n  user: any;\n  login: Function;\n  logout: Function;\n  getAccessToken: Function;\n  setError: Function;\n}\n\ninterface AuthProviderState {\n  error: any;\n  isAuthenticated: boolean;\n  user: any;\n}\n\nexport default function withAuthProvider<T extends React.Component<AuthComponentProps>>\n  (WrappedComponent: new (props: AuthComponentProps, context?: any) => T): React.ComponentClass {\n  return class extends React.Component<any, AuthProviderState> {\n    private publicClientApplication: PublicClientApplication;\n\n    constructor(props: any) {\n      super(props);\n      this.state = {\n        error: null,\n        isAuthenticated: false,\n        user: {}\n      };\n\n      // Initialize the MSAL application object\n      this.publicClientApplication = new PublicClientApplication({\n        auth: {\n          clientId: config.appId,\n          redirectUri: config.redirectUri\n        },\n        cache: {\n          cacheLocation: \"sessionStorage\",\n          storeAuthStateInCookie: true\n        }\n      });\n    }\n\n    componentDidMount() {\n      // If MSAL already has an account, the user\n      // is already logged in\n      const accounts = this.publicClientApplication.getAllAccounts();\n\n      if (accounts && accounts.length > 0) {\n        // Enhance user object with data from Graph\n        this.getUserProfile();\n      }\n    }\n\n    render() {\n      return <WrappedComponent\n        error={ this.state.error }\n        isAuthenticated={ this.state.isAuthenticated }\n        user={ this.state.user }\n        login={ () => this.login() }\n        logout={ () => this.logout() }\n        getAccessToken={ (scopes: string[]) => this.getAccessToken(scopes) }\n        setError={ (message: string, debug: string) => this.setErrorMessage(message, debug) }\n        { ...this.props } />;\n    }\n\n    async login() {\n      try {\n        // Login via popup\n        await this.publicClientApplication.loginPopup(\n          {\n            scopes: config.scopes,\n            prompt: \"select_account\"\n          });\n\n        // After login, get the user's profile\n        await this.getUserProfile();\n      }\n      catch (err) {\n        this.setState({\n          isAuthenticated: false,\n          user: {},\n          error: this.normalizeError(err)\n        });\n      }\n    }\n\n    logout() {\n      this.publicClientApplication.logout();\n    }\n\n    async getAccessToken(scopes: string[]): Promise<string> {\n      try {\n        const accounts = this.publicClientApplication\n          .getAllAccounts();\n\n        if (accounts.length <= 0) throw new Error('login_required');\n        // Get the access token silently\n        // If the cache contains a non-expired token, this function\n        // will just return the cached token. Otherwise, it will\n        // make a request to the Azure OAuth endpoint to get a token\n        var silentResult = await this.publicClientApplication\n          .acquireTokenSilent({\n            scopes: scopes,\n            account: accounts[0]\n          });\n\n        return silentResult.accessToken;\n      } catch (err) {\n        // If a silent request fails, it may be because the user needs\n        // to login or grant consent to one or more of the requested scopes\n        if (this.isInteractionRequired(err)) {\n          var interactiveResult = await this.publicClientApplication\n            .acquireTokenPopup({\n              scopes: scopes\n            });\n\n          return interactiveResult.accessToken;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    // <getUserProfileSnippet>\n    async getUserProfile() {\n      try {\n        var accessToken = await this.getAccessToken(config.scopes);\n\n        if (accessToken) {\n          // Get the user's profile from Graph\n          this.setState({\n            isAuthenticated: true,\n            user: {},\n            error: null\n          });\n        }\n      }\n      catch(err) {\n        this.setState({\n          isAuthenticated: false,\n          user: {},\n          error: this.normalizeError(err)\n        });\n      }\n    }\n    // </getUserProfileSnippet>\n\n    setErrorMessage(message: string, debug: string) {\n      this.setState({\n        error: { message: message, debug: debug }\n      });\n    }\n\n    normalizeError(error: string | Error): any {\n      var normalizedError = {};\n      if (typeof (error) === 'string') {\n        var errParts = error.split('|');\n        normalizedError = errParts.length > 1 ?\n          { message: errParts[1], debug: errParts[0] } :\n          { message: error };\n      } else {\n        normalizedError = {\n          message: error.message,\n          debug: JSON.stringify(error)\n        };\n      }\n      return normalizedError;\n    }\n\n    isInteractionRequired(error: Error): boolean {\n      if (!error.message || error.message.length <= 0) {\n        return false;\n      }\n\n      return (\n        error.message.indexOf('consent_required') > -1 ||\n        error.message.indexOf('interaction_required') > -1 ||\n        error.message.indexOf('login_required') > -1 ||\n        error.message.indexOf('no_account_in_silent_request') > -1\n      );\n    }\n  }\n}\n","C:\\source\\todo-yesterday\\src\\Welcome.tsx",[],"C:\\source\\todo-yesterday\\src\\NewEvent.tsx",[],"C:\\source\\todo-yesterday\\src\\Config.ts",[],"C:\\source\\todo-yesterday\\src\\GraphService.ts",["70","71"],"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// <graphServiceSnippet1>\nimport moment, { Moment } from 'moment';\nimport { Event, TodoTaskList, TodoTask } from 'microsoft-graph';\nimport { GraphRequestOptions, PageCollection, PageIterator } from '@microsoft/microsoft-graph-client';\n\nvar graph = require('@microsoft/microsoft-graph-client');\n\nfunction getAuthenticatedClient(accessToken: string) {\n  // Initialize Graph client\n  const client = graph.Client.init({\n    // Use the provided access token to authenticate\n    // requests\n    authProvider: (done: any) => {\n      done(null, accessToken);\n    }\n  });\n\n  return client;\n}\n\nexport async function getUserDetails(accessToken: string) {\n  const client = getAuthenticatedClient(accessToken);\n\n  const user = await client\n    .api('/me')\n    .select('displayName,mail,mailboxSettings,userPrincipalName')\n    .get();\n\n  return user;\n}\n// </graphServiceSnippet1>\n\n// <getUserWeekCalendarSnippet>\nexport async function getUserTodosYesterday(accessToken: string): Promise<TodoTask[]> {\n  const client = getAuthenticatedClient(accessToken);\n  let lists = await getLists(client);\n  let defaultList = lists.filter(l => l.wellknownListName === 'defaultList')[0];\n  let tasks = await getItemsFromList(client, defaultList.id as string);\n  return tasks;\n}\n\nexport async function getItemsFromList(client:any, listId:string): Promise<TodoTask[]> {\n\n  // GET /me/calendarview?startDateTime=''&endDateTime=''\n  // &$select=subject,organizer,start,end\n  // &$orderby=start/dateTime\n  // &$top=50\n  var response: PageCollection = await client\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .orderby('lastModifiedDateTime desc')\n    .top(100)\n    .get();\n\n  if (response[\"@odata.nextLink\"]) {\n    // Presence of the nextLink property indicates more results are available\n    // Use a page iterator to get all results\n    var events: TodoTask[] = [];\n\n    // Must include the time zone header in page\n    // requests too\n    var options: GraphRequestOptions = {\n    };\n\n    var pageIterator = new PageIterator(client, response, (event) => {\n      events.push(event);\n      return true;\n    }, options);\n\n    await pageIterator.iterate();\n\n    return events;\n  } else {\n\n    return response.value;\n  }\n}\n\nexport async function getLists(client:any): Promise<TodoTaskList[]> {\n\n  var endDateTime = moment().subtract(1, 'day').format();\n\n  // GET /me/calendarview?startDateTime=''&endDateTime=''\n  // &$select=subject,organizer,start,end\n  // &$orderby=start/dateTime\n  // &$top=50\n  var response: PageCollection = await client\n    .api('/me/todo/lists')\n    .get();\n\n  if (response[\"@odata.nextLink\"]) {\n    // Presence of the nextLink property indicates more results are available\n    // Use a page iterator to get all results\n    var lists: TodoTaskList[] = [];\n\n    // Must include the time zone header in page\n    // requests too\n    var options: GraphRequestOptions = {\n    };\n\n    var pageIterator = new PageIterator(client, response, (event) => {\n      lists.push(event);\n      return true;\n    }, options);\n\n    await pageIterator.iterate();\n\n    return lists;\n  } else {\n\n    return response.value;\n  }\n}\n\n\n\n\n// </getUserWeekCalendarSnippet>\n\n// <createEventSnippet>\nexport async function createEvent(accessToken: string, newEvent: Event): Promise<Event> {\n  const client = getAuthenticatedClient(accessToken);\n\n  // POST /me/events\n  // JSON representation of the new event is sent in the\n  // request body\n  return await client\n    .api('/me/events')\n    .post(newEvent);\n}\n// </createEventSnippet>\n","C:\\source\\todo-yesterday\\src\\Todo.tsx",["72","73","74","75"],"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport React from 'react';\nimport { NavLink as RouterNavLink } from 'react-router-dom';\nimport { Table } from 'reactstrap';\nimport moment, { Moment } from 'moment-timezone';\nimport { findOneIana } from \"windows-iana\";\nimport { TodoTask } from 'microsoft-graph';\nimport TodoRow from './TodoRow'\nimport { config } from './Config';\nimport { getUserTodosYesterday } from './GraphService';\nimport withAuthProvider, { AuthComponentProps } from './AuthProvider';\nimport './Calendar.css';\n\ninterface TodoState {\n  todosLoaded: boolean;\n  todos: TodoTask[];\n}\n\nclass Todo extends React.Component<AuthComponentProps, TodoState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      todosLoaded: false,\n      todos: []\n    };\n  }\n\n  async componentDidUpdate() {\n    if (this.props.user && !this.state.todosLoaded)\n    {\n      try {\n        // Get the user's access token\n        var accessToken = await this.props.getAccessToken(config.scopes);\n\n        // Get the user's events\n        var todos = await getUserTodosYesterday(accessToken);\n\n        // Update the array of events in state\n        this.setState({\n          todosLoaded: true,\n          todos: todos\n        });\n      }\n      catch (err) {\n        this.props.setError('ERROR', JSON.stringify(err));\n      }\n    }\n  }\n\n  // <renderSnippet>\n  render() {\n\n    return (\n      <div>\n        <div className=\"calendar-week\">\n          <div className=\"table-responsive\">\n            <Table size=\"sm\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Time</th>\n                  <th>Event</th>\n                </tr>\n              </thead>\n              <tbody>\n                <TodoRow todos={this.state.todos } />\n              </tbody>\n            </Table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  // </renderSnippet>\n}\n\nexport default withAuthProvider(Todo);\n",["76","77"],"C:\\source\\todo-yesterday\\src\\TodoRow.tsx",["78","79"],"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// <CalendarDayRowSnippet>\nimport React from 'react';\nimport moment, { Moment } from 'moment';\nimport { TodoTask } from 'microsoft-graph';\n\ninterface CalendarDayRowProps {\n  todos: TodoTask[];\n}\n\ninterface FormatMap {\n  [key: string] : string;\n}\n\n// moment.js format strings are slightly\n// different than the ones returned by Graph\nconst formatMap: FormatMap = {\n  \"h:mm tt\": \"h:mm A\",\n  \"hh:mm tt\": \"hh:mm A\"\n};\n\n// Helper function to format Graph date/time in the user's\n// preferred format\nfunction formatDateTime(dateTime: string | undefined, format: string) {\n  if (dateTime !== undefined) {\n    return moment(dateTime).format(formatMap[format] || format);\n  }\n}\n\nexport default class CalendarDayRow extends React.Component<CalendarDayRowProps> {\n  render() {\n\n    if (this.props.todos.length <= 0)\n    {\n      // Render an empty row for the day\n      return (\n        <></>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {this.props.todos.map(\n          function(task: TodoTask, index: Number) {\n            return (\n              <tr key={task.id}>\n                <td>{task.title}</td>\n              </tr>\n            )\n          }\n        )}\n      </React.Fragment>\n    )\n  }\n}\n// </CalendarDayRowSnippet>\n","C:\\source\\todo-yesterday\\src\\Calendar.tsx",["80","81","82","83"],"C:\\source\\todo-yesterday\\src\\CalendarDayRow.tsx",["84"],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":13,"column":8,"nodeType":"91","messageId":"92","endLine":13,"endColumn":12},{"ruleId":"89","severity":1,"message":"93","line":99,"column":7,"nodeType":"91","messageId":"92","endLine":99,"endColumn":19},{"ruleId":"89","severity":1,"message":"94","line":7,"column":10,"nodeType":"91","messageId":"92","endLine":7,"endColumn":24},{"ruleId":"89","severity":1,"message":"95","line":5,"column":18,"nodeType":"91","messageId":"92","endLine":5,"endColumn":24},{"ruleId":"89","severity":1,"message":"96","line":83,"column":7,"nodeType":"91","messageId":"92","endLine":83,"endColumn":18},{"ruleId":"89","severity":1,"message":"97","line":4,"column":21,"nodeType":"91","messageId":"92","endLine":4,"endColumn":34},{"ruleId":"89","severity":1,"message":"98","line":6,"column":8,"nodeType":"91","messageId":"92","endLine":6,"endColumn":14},{"ruleId":"89","severity":1,"message":"95","line":6,"column":18,"nodeType":"91","messageId":"92","endLine":6,"endColumn":24},{"ruleId":"89","severity":1,"message":"99","line":7,"column":10,"nodeType":"91","messageId":"92","endLine":7,"endColumn":21},{"ruleId":"85","replacedBy":"100"},{"ruleId":"87","replacedBy":"101"},{"ruleId":"89","severity":1,"message":"95","line":6,"column":18,"nodeType":"91","messageId":"92","endLine":6,"endColumn":24},{"ruleId":"89","severity":1,"message":"102","line":26,"column":10,"nodeType":"91","messageId":"92","endLine":26,"endColumn":24},{"ruleId":"89","severity":1,"message":"97","line":4,"column":21,"nodeType":"91","messageId":"92","endLine":4,"endColumn":34},{"ruleId":"89","severity":1,"message":"95","line":6,"column":18,"nodeType":"91","messageId":"92","endLine":6,"endColumn":24},{"ruleId":"89","severity":1,"message":"99","line":7,"column":10,"nodeType":"91","messageId":"92","endLine":7,"endColumn":21},{"ruleId":"89","severity":1,"message":"103","line":8,"column":10,"nodeType":"91","messageId":"92","endLine":8,"endColumn":15},{"ruleId":"89","severity":1,"message":"104","line":37,"column":9,"nodeType":"91","messageId":"92","endLine":37,"endColumn":17},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"@typescript-eslint/no-unused-vars","'Todo' is defined but never used.","Identifier","unusedVar","'calendarLink' is assigned a value but never used.","'getUserDetails' is defined but never used.","'Moment' is defined but never used.","'endDateTime' is assigned a value but never used.","'RouterNavLink' is defined but never used.","'moment' is defined but never used.","'findOneIana' is defined but never used.",["105"],["106"],"'formatDateTime' is defined but never used.","'Event' is defined but never used.","'rowClass' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]